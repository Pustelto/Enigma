// _decimal.scss | MIT License | gist.github.com/terkel/4373420

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

/// Helpers
@function depixel ( $value ) {
  @return $value / 1px;
}

@function enigUnit ( $value, $root: $enig-root, $unit: null ) {
  @return ( $value / $root ) * 1#{$unit};
}

/// next 3 functions are obsolete should be removed
@function unitLess ( $value, $root: 16 ) {
  @return ( $value / $root );
}

@function toEm ( $value, $root: 16 ) {
  @return ( $value / $root ) * 1em;
}

@function toRem ( $value, $root: 16 ) {
  @return ( $value / $root ) * 1rem;
}

/// Function to calculate size based on scale
@function enigmaSize ( $level: 0, $unit: $enig-unit ) {
  $value: $enig-number;

  @if $level > 0 {
    @for $i from 1 through $level {
      $value: $value * $enig-scale;
    }
  } @else if $level < 0 {
    @for $i from 1 through -$level {
      $value: $value / $enig-scale;
    }
  }

  @if $unit {
    @return $value * 1#{$unit};
  } @else {
    @return $value;
  }
}

@function enigmaLine ( $level: 0 ) {
  $lh: $enig-scale;

  @if $level > 0 {
    $lh: $level * $lh * $enig-number;
    @return ( $lh / enigmaSize( $level, null ) );
  }

  @return $lh;
}

@function enigmaLeading ( $level: 1, $unit: $enig-unit ) {
  @return ( $enig-scale * $level * $enig-number) * 1#{$unit};
}